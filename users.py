from aiogram import types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder
import asyncio
import sqlite3


PHOTOS_FOLDER = "img/menu/"
conn = sqlite3.connect("cafe.db")
cursor = conn.cursor()


async def view_the_history_order(msg: types.Message):
    month = {1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"}
    month_e = {1: "January", 2: "February", 3: "March", 4: "April", 5: "May", 6: "June", 7: "July", 8: "August", 9: "September", 10: "October", 11: "November", 12: "December"}
    res = cursor.execute("SELECT date FROM [orders] WHERE id_telegram = ?", (msg.from_user.id,)).fetchall()
    if len(res) > 0:
        builder = InlineKeyboardBuilder()
        sms = "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞:\n"
        month_db = set(int(j.split(".")[1]) for i in res for j in list(i))
        for g in month_db:
            builder.button(text=str(g), callback_data=month_e[g])
            sms += f"<b>{str(g)})</b>" + " " + f"<b>{month[g]}</b>" + "\n"
        await msg.answer(sms, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await msg.answer("–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –Ω–∞—à–µ–π –∫–æ—Ñ–µ–π–Ω–µ!\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å!")


async def loyalty_program(msg: types.Message):
    res = cursor.execute("SELECT id FROM [orders] WHERE id_telegram = ? AND cooked = ?", (msg.from_user.id, 1)).fetchall()
    county = len(res)
    if county % 11 == 0:
        await msg.answer(f"–í —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –í–∞—Å –æ–¥–∏–Ω –Ω–∞–ø–∏—Ç–æ–∫ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!")
    else:
        await msg.answer(f"–í –Ω–∞—à–µ–π –∫–æ—Ñ–µ–π–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è: –∫–∞–∂–¥—ã–π 12 –∑–∞–∫–∞–∑ –æ–¥–∏–Ω –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n"
                         f"–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å: {12 - res[0][0]}\n")


async def made_order(msg: types.Message):
    f_date = msg.date
    h, m = f_date.strftime("%H"), f_date.strftime("%M")
    if (int(h) + 3) < 9:
        await msg.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å. "
                         f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00 –ø–æ –ú–°–ö. "
                         f"–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ 20:30 –ø–æ –ú–°–ö")
    elif (int(h) + 3) >= 20 and int(m) > 30:  # h >= 20
        await msg.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ —É—Å–ø–µ–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –í–∞—à –∫–æ—Ñ–µ. "
                         f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00 –ø–æ –ú–°–ö. "
                         f"–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ 20:30 –ø–æ –ú–°–ö.")
    else:
        res0 = cursor.execute("SELECT id FROM barista WHERE open = ?", (1, )).fetchall()
        if len(res0) == 0:
            await msg.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –æ–Ω–ª–∞–π–Ω-—Å–º–µ–Ω—É. –º—ã —Å–æ–æ–±—â–∏–º –í–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º\n")
            res1 = cursor.execute("SELECT id FROM queue WHERE id_telegram = ?", (msg.from_user.id,)).fetchall()
            if len(res1) == 0:
                cursor.execute("INSERT INTO queue (id_telegram) VALUES (?)", (msg.from_user.id, ))
                conn.commit()
        else:
            res = cursor.execute("SELECT id FROM ingredients WHERE title = ? AND expenditure <= ?",
                                 ("–ö–æ—Ñ–µ", 482)).fetchall()
            if len(res) == 0:
                await msg.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –í–∞—à –Ω–∞–ø–∏—Ç–æ–∫. –£ –Ω–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n")
            else:
                photos = MediaGroupBuilder()
                photos.add_photo(FSInputFile("img/menu/1.jpg"))
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order"))
                await msg.answer_media_group(media=photos.build())
                await asyncio.sleep(1)
                await msg.answer(f"–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", reply_markup=builder.as_markup())


async def order_selection(callback: types.CallbackQuery):   # —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏–ª–∏ "–î–∞", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∫ –∑–∞–∫–∞–∑—É
    builder = InlineKeyboardBuilder()
    milk = cursor.execute("SELECT id FROM ingredients WHERE title = ? AND expenditure <= ?", ("–ú–æ–ª–æ–∫–æ", 400)).fetchall()
    if len(milk) == 0:  # –º–æ–ª–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º—ã –º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —ç—Å–ø—Ä–µ—Å—Å–æ
        builder.add(types.InlineKeyboardButton(text="–≠—Å–ø—Ä–µ—Å—Å–æ", callback_data="espresso"))
        await callback.message.answer(f"–Ø –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –≠—Å–ø—Ä–µ—Å—Å–æ\n", reply_markup=builder.as_markup())
    else:  # –º–æ–ª–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ö–≤–∞—Ç–∏—Ç
        choco = cursor.execute("SELECT id FROM ingredients WHERE title = ? AND expenditure <= ?", ("–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø", 940)).fetchall()
        caramel = cursor.execute("SELECT id FROM ingredients WHERE title = ? AND expenditure <= ?", ("–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø", 960)).fetchall()
        sok = cursor.execute("SELECT id FROM ingredients WHERE title = ? AND expenditure <= ?", ("–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫", 700)).fetchall()
        if len(choco) == 0 and len(caramel) > 0 and len(sok) > 0:  # –Ω–µ–ª—å–∑—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –º–æ–∫–∫–æ
            builder.add(types.InlineKeyboardButton(text="1", callback_data="espresso"))
            builder.add(types.InlineKeyboardButton(text="2", callback_data="cappuccino"))
            builder.add(types.InlineKeyboardButton(text="3", callback_data="latte"))
            builder.add(types.InlineKeyboardButton(text="4", callback_data="flat_white"))
            builder.add(types.InlineKeyboardButton(text="5", callback_data="bumble"))
            message = (f"–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:\n"
                       f"1. –≠—Å–ø—Ä–µ—Å—Å–æ\n"
                       f"2. –ö–∞–ø—É—á–∏–Ω–æ\n"
                       f"3. –õ–∞—Ç—Ç–µ\n"
                       f"4. –§–ª—ç—Ç —É–∞–π—Ç\n"
                       f"5. –ë–∞–º–±–ª\n")
        elif len(choco) > 0 and (len(caramel) == 0 or len(sok) == 0): # –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–∞–º–±–ª
            builder.add(types.InlineKeyboardButton(text="1", callback_data="espresso"))
            builder.add(types.InlineKeyboardButton(text="2", callback_data="cappuccino"))
            builder.add(types.InlineKeyboardButton(text="3", callback_data="latte"))
            builder.add(types.InlineKeyboardButton(text="4", callback_data="flat_white"))
            builder.add(types.InlineKeyboardButton(text="5", callback_data="mokko"))
            message = (f"–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:\n"
                       f"1. –≠—Å–ø—Ä–µ—Å—Å–æ\n"
                       f"2. –ö–∞–ø—É—á–∏–Ω–æ\n"
                       f"3. –õ–∞—Ç—Ç–µ\n"
                       f"4. –§–ª—ç—Ç —É–∞–π—Ç\n"
                       f"5. –ú–æ–∫–∫–æ\n")
        elif len(choco) == 0 and len(caramel) == 0 and len(sok) == 0: # –∏ –Ω–µ –º–æ–∫–∫–æ –∏ –Ω–µ –±–∞–º–±–ª
            builder.add(types.InlineKeyboardButton(text="1", callback_data="espresso"))
            builder.add(types.InlineKeyboardButton(text="2", callback_data="cappuccino"))
            builder.add(types.InlineKeyboardButton(text="3", callback_data="latte"))
            builder.add(types.InlineKeyboardButton(text="4", callback_data="flat_white"))
            message = (f"–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:\n"
                       f"1. –≠—Å–ø—Ä–µ—Å—Å–æ\n"
                       f"2. –ö–∞–ø—É—á–∏–Ω–æ\n"
                       f"3. –õ–∞—Ç—Ç–µ\n"
                       f"4. –§–ª—ç—Ç —É–∞–π—Ç\n")
        else:
            builder.add(types.InlineKeyboardButton(text="1", callback_data="espresso"))
            builder.add(types.InlineKeyboardButton(text="2", callback_data="cappuccino"))
            builder.add(types.InlineKeyboardButton(text="3", callback_data="latte"))
            builder.add(types.InlineKeyboardButton(text="4", callback_data="flat_white"))
            builder.add(types.InlineKeyboardButton(text="5", callback_data="mokko"))
            builder.add(types.InlineKeyboardButton(text="6", callback_data="bumble"))
            message = (f"–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:\n"
                       f"1. –≠—Å–ø—Ä–µ—Å—Å–æ\n"
                       f"2. –ö–∞–ø—É—á–∏–Ω–æ\n"
                       f"3. –õ–∞—Ç—Ç–µ\n"
                       f"4. –§–ª—ç—Ç —É–∞–π—Ç\n"
                       f"5. –ú–æ–∫–∫–æ\n"
                       f"6. –ë–∞–º–±–ª\n")
        await callback.message.answer(message, reply_markup=builder.as_markup())


async def send_answer_no(callback: types.CallbackQuery):   # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback.message.answer(f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. ü§ó\n"
                                  f"–°–ø–∞—Å–∏–±–æ!\n")


async def menu(msg: types.Message):
    photos = MediaGroupBuilder()
    photos.add_photo(FSInputFile("img/menu/1.jpg"))
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order"))
    await msg.answer_media_group(media=photos.build())
    await asyncio.sleep(1)
    await msg.answer(f"–ñ–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?\n", reply_markup=builder.as_markup())