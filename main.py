import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from web import keep_alive
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import sqlite3
import asyncio
from admin import user_messages, regular_messages, awaiting_response, make_a_schedule, inventory_accounting, menu_a
from users import made_order, order_selection, send_answer_no, menu, loyalty_program, view_the_history_order#, return_q
from barista import open_a_shift, made_open, barista_orders, prepare, ready_order, close_shift, education
from month import jan, feb, mar, apr, mayy, jun, jul, aug, sep, oct, nov, dec
from system_notifications import send_answer_yes
from payment import user_online_pay, successful_pay
from aiogram.utils.keyboard import InlineKeyboardBuilder


load_dotenv()
TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
conn = sqlite3.connect("cafe.db")
cursor = conn.cursor()
waiting_num, waiting_answers, id_answer, waiting_count = False, False, 0, False
waiting_text = False
coffe_int = False
drinks = ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç—Ç–µ", "–§–ª—ç—Ç —É–∞–π—Ç", "–ú–æ–∫–∫–æ", "–ë–∞–º–±–ª"]
order_pay = {"–≠—Å–ø—Ä–µ—Å—Å–æ": 0, "–ö–∞–ø—É—á–∏–Ω–æ": 0, "–õ–∞—Ç—Ç–µ": 0, "–§–ª—ç—Ç —É–∞–π—Ç": 0, "–ú–æ–∫–∫–æ": 0, "–ë–∞–º–±–ª": 0}
user_order = []
queue = []
schedule = True


@dp.message(Command('start'))
async def command_start(msg: types.Message):
    if msg.from_user.is_bot:   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–ª —Å–º—Å –±–æ—Ç
        await msg.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ "–ß–∞—à–∫–∞ –°—á–∞—Å—Ç—å—è".\n'
                         f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –±–æ—Ç–∞–º.\n'
                         f'–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫! üòä')
    else:
        res = cursor.execute("SELECT role_id FROM people WHERE telegram_id = ?", (msg.from_user.id,)).fetchall()
        if len(res) > 0 and res[0][0] == 1:   # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            kb = [
                [types.KeyboardButton(text="–£—á–µ—Ç –∑–∞–ø–∞—Å–æ–≤")],
                [types.KeyboardButton(text="–ú–µ–Ω—é")],
                [types.KeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
            ]
            m_start = (f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {msg.chat.first_name}!üëã\n'
                       f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ–∑–º–æ–∂–Ω–æ:\n'
                       f'~ "–£—á–µ—Ç –∑–∞–ø–∞—Å–æ–≤" - –Ω–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è —è –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –±—É–¥–µ—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n'
                       f'~ "–ú–µ–Ω—é" - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é\n'
                       f'~ "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\n')
        elif len(res) > 0 and res[0][0] == 2:   # –±–∞—Ä–∏—Å—Ç–∞
            kb = [
                [types.KeyboardButton(text="–ó–∞–∫–∞–∑—ã")],
                [types.KeyboardButton(text="–û–±—É—á–µ–Ω–∏–µ")],
                [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
                [types.KeyboardButton(text="–°–º–µ–Ω–∞")]
            ]
            m_start = (f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±–∞—Ä–∏—Å—Ç–∞ {msg.chat.first_name}!üëã\n'
                       f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ–∑–º–æ–∂–Ω–æ:\n'
                       f'~ "–ó–∞–∫–∞–∑—ã" - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤\n'
                       f'~ "–û–±—É—á–µ–Ω–∏–µ" - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ\n'
                       f'~ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" - —Ä–∞—Å—á–∏—Ç–∞—Ç—å –≤–µ—Å –∫–æ—Ñ–µ –≤ —á–∞—à–∫–µ\n'
                       f'~ "–°–º–µ–Ω–∞" - –æ—Ç–∫—Ä—ã—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É, –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –¥–µ–Ω—å\n')
        else:   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            kb = [
                [types.KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
                [types.KeyboardButton(text="–ú–µ–Ω—é")],
                [types.KeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")],
                [types.KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
                [types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤")]
            ]
            m_start = (f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {msg.chat.first_name}!üëã\n'
                       f'–Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ "–ß–∞—à–∫–∞ –°—á–∞—Å—Ç—å—è". –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n'
                       f'~ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" - —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –æ–Ω–ª–∞–π–Ω –∏ –Ω–µ —Å—Ç–æ–π—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏\n'
                       f'~ "–ú–µ–Ω—é" - –≤—Å–µ –ª—é–±–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ\n'
                       f'~ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏" - –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n'
                       f'~ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" - –Ω–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ\n'
                       f'~ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤" - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—à–∏–µ –∑–∞–∫–∞–∑—ã\n')
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
        res1 = cursor.execute("SELECT name FROM people WHERE telegram_id = ?", (msg.chat.id,)).fetchall()
        if len(res1) == 0:
            user = (msg.chat.id, 3, msg.chat.first_name)
            cursor.execute("INSERT INTO people (telegram_id, role_id, name) VALUES (?, ?, ?)", user)
            conn.commit()
        await msg.answer(m_start, reply_markup=keyboard)


@dp.message(F.text.lower() == "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")  # –±–∞—Ä–∏—Å—Ç–∞
async def calculator(msg: types.Message):
    global coffe_int
    coffe_int = True
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º–æ–ª–æ—Ç–æ–≥–æ –∫–æ—Ñ–µ –≤ –≥—Ä–∞–º–º:")


@dp.message(F.text.lower() == "—É—á–µ—Ç –∑–∞–ø–∞—Å–æ–≤")  # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async def inventory_a(msg: types.Message):
    await inventory_accounting(msg)


@dp.message(F.text.lower() == "–æ–±—É—á–µ–Ω–∏–µ")   # –±–∞—Ä–∏—Å—Ç–∞
async def educat(msg: types.Message):
    await education(msg)


@dp.message(F.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def view_tho(msg: types.Message):
    await view_the_history_order(msg)


@dp.message(F.text.lower() == "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def loyalty_p(msg: types.Message):
    await loyalty_program(msg)


@dp.message(F.text.lower() == "–∑–∞–∫–∞–∑—ã")   # –±–∞—Ä–∏—Å—Ç–∞
async def barista_o(msg: types.Message):
    await barista_orders(msg)


@dp.message(F.text.lower() == "—Å–º–µ–Ω–∞")   # –±–∞—Ä–∏—Å—Ç–∞
async def open_shift(msg: types.Message):
    await open_a_shift(msg)


@dp.callback_query(F.data == "January")   # –º–µ—Å—è—Ü—ã
async def January(callback: types.CallbackQuery):
    await jan(callback)


@dp.callback_query(F.data == "February")
async def February(callback: types.CallbackQuery):
    await feb(callback)


@dp.callback_query(F.data == "March")
async def March(callback: types.CallbackQuery):
    await mar(callback)


@dp.callback_query(F.data == "April")
async def April(callback: types.CallbackQuery):
    await apr(callback)


@dp.callback_query(F.data == "May")
async def May(callback: types.CallbackQuery):
    await mayy(callback)


@dp.callback_query(F.data == "June")
async def June(callback: types.CallbackQuery):
    await jun(callback)


@dp.callback_query(F.data == "July")
async def July(callback: types.CallbackQuery):
    await jul(callback)


@dp.callback_query(F.data == "August")
async def August(callback: types.CallbackQuery):
    await aug(callback)


@dp.callback_query(F.data == "September")
async def September(callback: types.CallbackQuery):
    await sep(callback)


@dp.callback_query(F.data == "October")
async def October(callback: types.CallbackQuery):
    await oct(callback)


@dp.callback_query(F.data == "November")
async def November(callback: types.CallbackQuery):
    await nov(callback)


@dp.callback_query(F.data == "December")
async def December(callback: types.CallbackQuery):
    await dec(callback)


@dp.callback_query(F.data == "close")   # –±–∞—Ä–∏—Å—Ç–∞
async def close_s(callback: types.CallbackQuery):
    await close_shift(callback)


@dp.callback_query(F.data == "yes")   # —Å–∏—Å—Ç–µ–º–∞
async def send_a_y(callback: types.CallbackQuery):
    await send_answer_yes(callback, bot)


@dp.callback_query(F.data == "no")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def send_a_n(callback: types.CallbackQuery):
    await send_answer_no(callback)


@dp.callback_query(F.data == "open")   # –±–∞—Ä–∏—Å—Ç–∞
async def opening(callback: types.CallbackQuery):
    await made_open(callback, bot)


@dp.message(F.text.lower() == "—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")   # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async def user_m(msg: types.Message):
    await user_messages(msg)


@dp.callback_query(F.data == "prepare")   # –±–∞—Ä–∏—Å—Ç–∞
async def preparing(callback: types.CallbackQuery):
    await prepare(callback)


@dp.callback_query(F.data == "ready")   # –±–∞—Ä–∏—Å—Ç–∞
async def ready_o(callback: types.CallbackQuery):
    await ready_order(callback, bot)


@dp.callback_query(F.data == "no_admin")   # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async def regular_m(callback: types.CallbackQuery):
    await regular_messages(callback)


@dp.callback_query(F.data == "admin")   # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async def awaiting_r(callback: types.CallbackQuery):
    await awaiting_response(callback)


@dp.callback_query(F.data == "yes_a")   # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async def admin_answer(callback: types.CallbackQuery):
    global waiting_num
    waiting_num = True
    await callback.message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å\n")


@dp.message(F.text.lower() == "—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def made_orders(msg: types.Message):
    await made_order(msg)


@dp.callback_query(F.data == "order")  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def made(callback: types.CallbackQuery):
    await order_selection(callback)


@dp.callback_query(F.data == "espresso")
async def espresso(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–≠—Å–ø—Ä–µ—Å—Å–æ"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –≠—Å–ø—Ä–µ—Å—Å–æ\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "cappuccino")
async def cappuccino(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–ö–∞–ø—É—á–∏–Ω–æ"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –ö–∞–ø—É—á–∏–Ω–æ\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "latte")
async def latte(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–õ–∞—Ç—Ç–µ"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –õ–∞—Ç—Ç–µ\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "flat_white")
async def flat_white(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–§–ª—ç—Ç —É–∞–π—Ç"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –§–ª—ç—Ç —É–∞–π—Ç\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "mokko")
async def mokko(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–ú–æ–∫–∫–æ"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –ú–æ–∫–∫–æ\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "bumble")
async def bumble(callback: types.CallbackQuery):
    global user_order, waiting_count
    user_order.append(["–ë–∞–º–±–ª"])
    waiting_count = True
    await callback.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: –ë–∞–º–±–ª\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–æ)\n")
    await callback.message.delete()


@dp.callback_query(F.data == "no_order")   # –æ–ø–ª–∞—Ç–∞
async def do_not_order(callback: types.CallbackQuery):
    global order_pay
    await user_online_pay(callback, order_pay)


@dp.callback_query(F.data == "online_pay")  # –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–¥–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
async def online_p(callback: types.CallbackQuery):
    global order_pay
    await successful_pay(callback, order_pay, bot)
    order_pay = {"–≠—Å–ø—Ä–µ—Å—Å–æ": 0, "–ö–∞–ø—É—á–∏–Ω–æ": 0, "–õ–∞—Ç—Ç–µ": 0, "–§–ª—ç—Ç —É–∞–π—Ç": 0, "–ú–æ–∫–∫–æ": 0, "–ë–∞–º–±–ª": 0}


@dp.pre_checkout_query()   # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message(F.successful_payment)   # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞
async def procces_successful(msg: types.Message):
    await msg.answer(f'{msg.successful_payment.telegram_payment_charge_id}',
                     message_effect_id="5104841245755180586")


@dp.callback_query(F.data == "yes_order")  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def do_yes_order(callback: types.CallbackQuery):
    await order_selection(callback)


@dp.message(F.text.lower() == "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def feedback(msg: types.Message):
    global waiting_text
    waiting_text = True
    await msg.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n")


@dp.message(F.text.lower() == "–º–µ–Ω—é")   # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def send_menu(msg: types.Message):
    res = cursor.execute("SELECT role_id FROM people WHERE telegram_id = ?", (msg.from_user.id,)).fetchall()
    if res[0][0] == 1:
        await menu_a(msg)
    else:
        await menu(msg)


@dp.message()
async def messages(msg: types.Message):
    global waiting_num, waiting_answers, id_answer, waiting_count, user_order, waiting_text, order_pay, coffe_int
    res = cursor.execute("SELECT role_id FROM people WHERE telegram_id = ?", (msg.from_user.id,)).fetchall()
    if waiting_num and res[0][0] == 1:
        if msg.text.isdigit():
            res3 = cursor.execute("SELECT text_answer FROM question WHERE id = ?", (msg.text, )).fetchall()
            await msg.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                             f"–ù–∞–ø–æ–º–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                             f"{res3[0][0]}")
            waiting_num, waiting_answers, id_answer = False, True, int(msg.text)
        else:
            await msg.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å\n")
    elif coffe_int and res[0][0] == 2:
        if msg.text.isdigit():
            c = (20 / 100) * int(msg.text) / (10 / 100)
            await msg.answer(f"–í–µ—Å –∫–æ—Ñ–µ –≤ —á–∞—à–∫–µ: {c:.2f} –≥—Ä–∞–º–º")
            coffe_int = False
        else:
            await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Å –º–æ–ª–æ—Ç–æ–≥–æ –∫–æ—Ñ–µ –≤ –≥—Ä–∞–º–º –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º!")
    elif waiting_answers and res[0][0] == 1:
        res4 = cursor.execute("SELECT telegram_id FROM question WHERE id = ?", (id_answer, )).fetchall()
        try:
            await bot.send_message(chat_id=res4[0][0], text=f"‚ùó–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚ùó\n"
                                                            f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                                                            f"{msg.text}\n")
            cursor.execute("UPDATE question SET answer = ? WHERE id = ?", (1, id_answer))
            conn.commit()
        except Exception:
            await msg.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ\n")
        id_answer, waiting_answers = 0, False
    elif waiting_count and res[0][0] == 3:
        if msg.text.isdigit():
            if order_pay[user_order[-1][0]] <= 5:
                if int(msg.text) <= 5 and order_pay[user_order[-1][0]] + int(msg.text) <= 5:
                    user_order[-1].append(int(msg.text))
                    order_pay[user_order[-1][0]] += int(msg.text)
                    waiting_count, builder = False, InlineKeyboardBuilder()
                    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="yes_order"))
                    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_order"))
                    await msg.answer(f"–•–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É —á—Ç–æ-—Ç–æ –µ—â–µ?\n", reply_markup=builder.as_markup())
                else:
                    await msg.answer(f"–î–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 5—à—Ç.\n"
                                     f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: {5 - order_pay[user_order[-1][0]]}—à—Ç.\n"
                                     f"–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {user_order[-1][0]} (–æ–¥–Ω–æ —á–∏—Å–ª–æ)\n")
            else:
                await msg.answer(f"–î–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 5—à—Ç.\n")
                waiting_count = False
        else:
            await msg.answer(f"–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {user_order[-1][0]} (–æ–¥–Ω–æ —á–∏—Å–ª–æ)\n")
    elif waiting_text and res[0][0] == 3:
        answer = (msg.text, msg.chat.id, 0, 0)
        cursor.execute("INSERT INTO question (text_answer, telegram_id, ans_admin, answer) VALUES (?, ?, ?, ?)", answer)
        conn.commit()
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="yes"))
        builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no"))
        await msg.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=builder.as_markup())
        waiting_text = False


async def main():
    await dp.start_polling(bot)

keep_alive()
if __name__ == "__main__":
    #logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())